# Generated from ABNT.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,196,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,5,
        20,181,8,20,10,20,12,20,184,9,20,1,20,1,20,1,21,4,21,189,8,21,11,
        21,12,21,190,1,22,1,22,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,1,0,3,4,0,10,10,13,13,34,34,92,
        92,1,0,48,57,3,0,9,10,13,13,32,32,197,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,1,47,1,0,0,0,3,55,1,0,0,0,5,57,1,0,0,0,7,62,1,0,0,0,9,64,
        1,0,0,0,11,66,1,0,0,0,13,73,1,0,0,0,15,81,1,0,0,0,17,88,1,0,0,0,
        19,95,1,0,0,0,21,99,1,0,0,0,23,103,1,0,0,0,25,105,1,0,0,0,27,112,
        1,0,0,0,29,119,1,0,0,0,31,136,1,0,0,0,33,144,1,0,0,0,35,159,1,0,
        0,0,37,174,1,0,0,0,39,176,1,0,0,0,41,178,1,0,0,0,43,188,1,0,0,0,
        45,192,1,0,0,0,47,48,5,33,0,0,48,49,5,97,0,0,49,50,5,114,0,0,50,
        51,5,116,0,0,51,52,5,105,0,0,52,53,5,103,0,0,53,54,5,111,0,0,54,
        2,1,0,0,0,55,56,5,123,0,0,56,4,1,0,0,0,57,58,5,110,0,0,58,59,5,111,
        0,0,59,60,5,109,0,0,60,61,5,101,0,0,61,6,1,0,0,0,62,63,5,61,0,0,
        63,8,1,0,0,0,64,65,5,44,0,0,65,10,1,0,0,0,66,67,5,116,0,0,67,68,
        5,105,0,0,68,69,5,116,0,0,69,70,5,117,0,0,70,71,5,108,0,0,71,72,
        5,111,0,0,72,12,1,0,0,0,73,74,5,114,0,0,74,75,5,101,0,0,75,76,5,
        118,0,0,76,77,5,105,0,0,77,78,5,115,0,0,78,79,5,116,0,0,79,80,5,
        97,0,0,80,14,1,0,0,0,81,82,5,118,0,0,82,83,5,111,0,0,83,84,5,108,
        0,0,84,85,5,117,0,0,85,86,5,109,0,0,86,87,5,101,0,0,87,16,1,0,0,
        0,88,89,5,112,0,0,89,90,5,97,0,0,90,91,5,103,0,0,91,92,5,105,0,0,
        92,93,5,110,0,0,93,94,5,97,0,0,94,18,1,0,0,0,95,96,5,109,0,0,96,
        97,5,101,0,0,97,98,5,115,0,0,98,20,1,0,0,0,99,100,5,97,0,0,100,101,
        5,110,0,0,101,102,5,111,0,0,102,22,1,0,0,0,103,104,5,125,0,0,104,
        24,1,0,0,0,105,106,5,33,0,0,106,107,5,108,0,0,107,108,5,105,0,0,
        108,109,5,118,0,0,109,110,5,114,0,0,110,111,5,111,0,0,111,26,1,0,
        0,0,112,113,5,101,0,0,113,114,5,100,0,0,114,115,5,105,0,0,115,116,
        5,99,0,0,116,117,5,97,0,0,117,118,5,111,0,0,118,28,1,0,0,0,119,120,
        5,108,0,0,120,121,5,111,0,0,121,122,5,99,0,0,122,123,5,97,0,0,123,
        124,5,108,0,0,124,125,5,95,0,0,125,126,5,112,0,0,126,127,5,117,0,
        0,127,128,5,98,0,0,128,129,5,108,0,0,129,130,5,105,0,0,130,131,5,
        99,0,0,131,132,5,97,0,0,132,133,5,99,0,0,133,134,5,97,0,0,134,135,
        5,111,0,0,135,30,1,0,0,0,136,137,5,101,0,0,137,138,5,100,0,0,138,
        139,5,105,0,0,139,140,5,116,0,0,140,141,5,111,0,0,141,142,5,114,
        0,0,142,143,5,97,0,0,143,32,1,0,0,0,144,145,5,109,0,0,145,146,5,
        101,0,0,146,147,5,115,0,0,147,148,5,95,0,0,148,149,5,112,0,0,149,
        150,5,117,0,0,150,151,5,98,0,0,151,152,5,108,0,0,152,153,5,105,0,
        0,153,154,5,99,0,0,154,155,5,97,0,0,155,156,5,99,0,0,156,157,5,97,
        0,0,157,158,5,111,0,0,158,34,1,0,0,0,159,160,5,97,0,0,160,161,5,
        110,0,0,161,162,5,111,0,0,162,163,5,95,0,0,163,164,5,112,0,0,164,
        165,5,117,0,0,165,166,5,98,0,0,166,167,5,108,0,0,167,168,5,105,0,
        0,168,169,5,99,0,0,169,170,5,97,0,0,170,171,5,99,0,0,171,172,5,97,
        0,0,172,173,5,111,0,0,173,36,1,0,0,0,174,175,5,91,0,0,175,38,1,0,
        0,0,176,177,5,93,0,0,177,40,1,0,0,0,178,182,5,34,0,0,179,181,8,0,
        0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,
        0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,186,5,34,0,0,186,42,1,0,
        0,0,187,189,7,1,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,
        0,0,190,191,1,0,0,0,191,44,1,0,0,0,192,193,7,2,0,0,193,194,1,0,0,
        0,194,195,6,22,0,0,195,46,1,0,0,0,3,0,182,190,1,6,0,0
    ]

class ABNTLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    CADEIA = 21
    INT = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!artigo'", "'{'", "'nome'", "'='", "','", "'titulo'", "'revista'", 
            "'volume'", "'pagina'", "'mes'", "'ano'", "'}'", "'!livro'", 
            "'edicao'", "'local_publicacao'", "'editora'", "'mes_publicacao'", 
            "'ano_publicacao'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "CADEIA", "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "CADEIA", "INT", "WS" ]

    grammarFileName = "ABNT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


